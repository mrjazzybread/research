:PROPERTIES:
:ID:       aabac408-0f7a-4d52-98e3-d8351e19f401
:END:
#+title: Gospel Namespaces
[[id:27926a9e-056a-43bb-886e-37f4a973bf98][Gospel]] namespaces have never been well defined; it is unclear what is
the difference between a [[id:27926a9e-056a-43bb-886e-37f4a973bf98][Gospel]] name, and [[id:b3f8eb53-1b01-487c-aeaa-4d8c7574e836][OCaml]] name and when you
could use one or the other.

Currently, my proposal is for all names that are introduced in [[id:27926a9e-056a-43bb-886e-37f4a973bf98][Gospel]]
specifications to never be allowed to be used in [[id:b3f8eb53-1b01-487c-aeaa-4d8c7574e836][OCaml]] code.  As for
[[id:b3f8eb53-1b01-487c-aeaa-4d8c7574e836][OCaml]] names, here are the ways they can be used in [[id:27926a9e-056a-43bb-886e-37f4a973bf98][Gospel]]
specifications.

* Functions
[[id:b3f8eb53-1b01-487c-aeaa-4d8c7574e836][OCaml]] functions are never allowed to be referred to in [[id:27926a9e-056a-43bb-886e-37f4a973bf98][Gospel]]
specifications. Obvious exception being [[id:27926a9e-056a-43bb-886e-37f4a973bf98][Gospel]] specification headers,
e.g. in
  #+ATTR_LATEX: :environment ocamlenv
  #+begin_example ocaml
  val f : int -> int
  (*@ let x = f y in ... *)
  #+end_example
  The use of the name ~f~ is valid.

* Modules
One can use [[id:b3f8eb53-1b01-487c-aeaa-4d8c7574e836][OCaml]] modules to qualify a [[id:27926a9e-056a-43bb-886e-37f4a973bf98][Gospel]] identifier, e.g:
  #+ATTR_LATEX: :environment ocamlenv
  #+begin_example ocaml
  module M : sig
    val f : int -> int
    (*@ predicate p *)
  end

  (*@ axiom example : M.p *)
  #+end_example

One can open [[id:b3f8eb53-1b01-487c-aeaa-4d8c7574e836][OCaml]] modules using a [[id:27926a9e-056a-43bb-886e-37f4a973bf98][Gospel]] ~open~, but only [[id:27926a9e-056a-43bb-886e-37f4a973bf98][Gospel]]
names within that module are introduced into the scope.
  #+ATTR_LATEX: :environment ocamlenv
  #+begin_example ocaml
  (*@ open M *) (* This [open] introduces the predicate [p] into the scope *)
  #+end_example

Opening an [[id:b3f8eb53-1b01-487c-aeaa-4d8c7574e836][OCaml]] module using an [[id:b3f8eb53-1b01-487c-aeaa-4d8c7574e836][OCaml]] open introduces all [[id:b3f8eb53-1b01-487c-aeaa-4d8c7574e836][OCaml]] and
[[id:27926a9e-056a-43bb-886e-37f4a973bf98][Gospel]] names within that module into the scope.
  #+ATTR_LATEX: :environment ocamlenv
  #+begin_example ocaml
  open M
  (* This [open] introduces the predicate [p] and the
     function [f] into the scope *)
  #+end_example

* Types

[[id:b3f8eb53-1b01-487c-aeaa-4d8c7574e836][OCaml]] type names are disallowed in [[id:27926a9e-056a-43bb-886e-37f4a973bf98][Gospel]] specifications, barring the
following exceptions.

- Each [[id:b3f8eb53-1b01-487c-aeaa-4d8c7574e836][OCaml]] type has a [[id:82f9754c-85f3-44bf-a75b-49d0a5f8331c][lens]] associated with it. These can only be
  used in an ownership clause in a specification or with a quantifier,
  e.g.
#+ATTR_LATEX: :environment ocamlenv
  #+begin_example ocaml
   type mut_nat
   (*@ mutable
       model : integer *)

   val inc : mut_nat -> unit
   (*@ let () = inc n in
       modifies n @ mut_nat
       ensures n = old n + 1 *)

   (*@ axiom example : forall x : mut_nat @ mut_nat. x > 0 *)
  #+end_example

- If an [[id:b3f8eb53-1b01-487c-aeaa-4d8c7574e836][OCaml]] type has multiple [[id:79d0fef4-20f0-45af-9b03-e189534b420c][Gospel models]], e.g:
#+ATTR_LATEX: :environment ocamlenv
  #+begin_example ocaml
  type array
  (*@ model length : integer
      model contents : integer sequence *)
#+end_example
  This is considered sugar for
  #+begin_example ocaml
  (*@ type array = { length : integer; contents : integer sequence } *)

  type array
  (*@ model : array *)
  #+end_example
  Meaning that the name ~array~ is valid in Gospel specifications for a
  record with the same fields as the type's model.

Note that in none of these cases are we actually using an [[id:b3f8eb53-1b01-487c-aeaa-4d8c7574e836][OCaml]] type,
but rather a [[id:27926a9e-056a-43bb-886e-37f4a973bf98][Gospel]] construct that happens to share a name with an
[[id:b3f8eb53-1b01-487c-aeaa-4d8c7574e836][OCaml]] type.
