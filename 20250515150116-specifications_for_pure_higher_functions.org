:PROPERTIES:
:ID:       05941737-cdba-4c1b-aadd-cbaa7d22e0fd
:END:
#+title: Specifications for pure higher functions
In [[id:27926a9e-056a-43bb-886e-37f4a973bf98][Gospel]], when we have a higher order function such as:
#+ATTR_LATEX: :environment ocamlenv
#+begin_example ocaml
val init : int -> (int -> 'a) -> 'a list
#+end_example
It is tempting to write a specification such as:
#+ATTR_LATEX: :environment ocamlenv
#+begin_example ocaml
val init : int -> (int -> 'a) -> 'a list
(*@ let r = init len f in
    ensures r = Sequence.init len f *)
#+end_example
This is, naturally, unsound as the function ~f~ could potentially
perform some kind of impure behaviour such as diverging or raising an
exception.  In order for this to be valid, we must restrict ~f~ so that
it is a pure function.  This means:

- It cannot diverge
- It cannot raise an exception
- It cannot modify any state variables
- It cannot read from or write to any mutable top level variables.

Even if the function is pure, however, it is still not necessarily
allowed to be used in Gospel specifications since in Gospel terms we
are only allowed to use Gospel values.  At first glance, this would
mean that the only OCaml functions that could be used in
specifications would be those whose arguments and return values are
[[id:259dc44f-ed8b-4851-8f33-7a4088ab9b83][isomorphic their logical representations]].  This would be highly
restrictive since most OCaml types (including ~int~, ~option~ and ~list~) do
not satisfy this condition.

One way of easing this restriction is assuming that, for each pure
OCaml function there exists a Gospel function with the same name that
receives as arguments the [[id:79d0fef4-20f0-45af-9b03-e189534b420c][model]] of the OCaml arguments and returns
the ~model~ of the OCaml return values.  For example:
#+ATTR_LATEX: :environment ocamlenv
#+begin_example ocaml
val reverse : string -> string
(*@ let y = reverse x in
    ensures x = Sequence.rev y *)
#+end_example
The semantics of this function are:

\[\begin{align}
  \forall\ &(x : string)\ (x' : char\ sequence).\\
  &\{\ String(x, x')\ \}\\
  &reverse\ x\\
  &\{\ \lambda (y : string).\ \exists (y' : char\ sequence).\\
  &\ \ \ \ \ String(y,
y') \star x' = Sequence.rev\ y'\ \}
  \end{align} \]

Since the String predicate is bijective (assuming strings have
unbounded length), ~reverse~ is also a relation between ~char sequences~.
This means that, if ~reverse~ is pure, in that it has no side effects
and its output only depends on its arguments, its behaviour could be
expressed as an abstract Gospel function such as:
#+ATTR_LATEX: :environment ocamlenv
#+begin_example ocaml
(*@ function reverse (x : char sequence) : char sequence
    ensures x * 2 = result *)
#+end_example
Generally, this reflection could be assumed for some arbitrary
function if:
- Every argument and return value has a logical representation.
- The predicates that relate each value to their ~model~ are not allowed
  to use any ownership predicates (e.g. points to).
- The predicates that relate each argument to their ~model~ must be
  surjective.
- The predicate that relates the return value to its model must be
  injective.
